def alg_B_F(G, Vershina):
    # Необходимо инициализировать расстояния от исходной вершины до всех остальных, как бесконечные, кроме исходной вершины (у нее 0)
    rast = {v: float('inf') for v in G}                # Создали словарь (ключ - вершина, значение - бесконечность)
    rast[Vershina] = 0

    # Вычисляем самые короткие расстояния для каждого ребра, выполняем |V| - 1 раз, т к в самом худшем случае кратчайший путь может содержать не более |V| - 1 ребер
    for _ in range(len(G) - 1):
        for u in G:                            # Выполняем для каждого ребра u-v
            for v, ves in G[u].items():     # Идем по вершинам, испоьзуем их ключ и значение из словаря
                if rast[u] != float('inf') and rast[u] + ves < rast[v]:
                    rast[v] = rast[u] + ves        # Обновляем расстояние, если нашли более короткое

    # Необходимо проверить, есть ли в графе цикл отрицательного веса, проходимся еще раз по ребрам (если на этом этапе мы нашли более короткие расстояния, то есть цикл отр веса)
    for u in G:
        for v, ves in G[u].items():
            if rast[u] != float('inf') and rast[u] + ves < rast[v]:
                raise ValueError("В графе есть цикл с отрицательным весом")

    return rast


##### ПРИМЕР РАБОТЫ #####
new_graph = {
    'A': {'C': 4, 'E': 5},
    'B': {'C': -4},
    'C': {'A': -3},
    'D': {'A': 4, 'C': 7, 'E': 3},
    'E': {'B': 2, 'C': 3}
}
vershna_1 = 'D'

Otvet = alg_B_F(new_graph, vershna_1)
print(Otvet)